This series is to share my experience with writing a Reactive Restful service with Spring 5 (and Spring Boot 2)

At the time of the writing the GA is not available yet so we will use the BUILD-SNAPSHOT versions

The series will initially consist of 2 parts: 
- The first part is about writing a "Non reactive" restful service and securing it with SSL and OAuth2.
- The second is about turning that service into a reactive one.

Used technologies:
------------------

- Spring Boot 2.0.0.BUILD-SNAPSHOT
	- Spring 5.0.0.BUILD-SNAPSHOT
	- Spring Security 5.0.0.BUILD-SNAPSHOT
- Embedded MongoDB 2.0.0
- Java 8
- Maven 3

The service
-----------
During this tutorial we will create a basic Rest service to manage clients of a company. A client can be a of type Person or Company and can be managed through CRUD operations.
MongoDB will be used to store our clients.

Let's start...

1. Create a Spring Boot project
-------------------------------
We will start with a basic Java 8 maven project.
..................
..................
All we need to turn it into a Spring Boot project is to add a reference to the spring Boot pom like this

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.0.BUILD-SNAPSHOT</version>
	</parent>

Because Spring Boot 2 and spring 5 are not available yet in the main Maven repository we need to manually add the Snaphot repositories, as soon as the GA is available the section below can be removed.

	<!-- REMOVE THIS WHEN GA IS AVAILABLE -->
	<repositories>
		<repository>
			<id>spring-snapshots</id>
			<url>http://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<url>http://repo.spring.io/milestone</url>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>spring-snapshots</id>
			<url>http://repo.spring.io/snapshot</url>
		</pluginRepository>
		<pluginRepository>
			<id>spring-milestones</id>
			<url>http://repo.spring.io/milestone</url>
		</pluginRepository>
	</pluginRepositories>

Spring Boot modules will be added as we need them, the first to add is {code spring-boot-starter-test} to write unit tests.
If you're not familiar with spring Boot and Maven you can read this (http://docs.spring.io/spring-boot/docs/2.0.0.BUILD-SNAPSHOT/reference/htmlsingle/#getting-started-first-application)

2. Let's create the domain entities
-----------------------------------

The entities are simple enough and I won't go much into details but a few things are worth mentioning:
- All entities are immutable (see https://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html)
- The builder pattern will be used to create objects (https://en.wikipedia.org/wiki/Builder_pattern)
- Client class has an id of type ObjectId, this is one of 3 types Spring Data MongoDB supports to manage MongoDB id fields, the 2 other types are String and BigInteger (see http://docs.spring.io/spring-data/data-mongo/docs/2.0.0.M2/reference/html/#mongo-template.id-handling)
- Client has a mandatory field {code clientType} and Address a mandatory field {code country} all other fields can be null.

3. Let's save the domain entities
---------------------------------

3.1 Add spring-boot-starter-data-mongodb starter module as a maven dependency: 
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>
		</dependency>
		
	Allows us to easily create a MongoDB repository with ready to use CRUD operations.
	
3.2 Add de.flapdoodle.embed.mongo maven dependency: 
		<dependency>
			<groupId>de.flapdoodle.embed</groupId>
			<artifactId>de.flapdoodle.embed.mongo</artifactId>
		</dependency>
		
	This is an embedded version of MongoDB because we don't want to rely on an external instance of MongoDB for tests
	
3.3 Create the repository

	public interface ClientRepository extends CrudRepository<Client, ObjectId> {}

	Inheriting from CrudRepository gives as access to already defined operations like: {@ save()}, {@ delete()}, {@ findOne()} and {@ findAll()} 
	If you're familiar with spring you may have noticed that clientRepository is not annotated with @Repository, this is a new feature of spring where all classes are managed and can be injected with @Autowired.
	
	If you're not familiar with Spring Data you can find more details here (http://docs.spring.io/spring-data/data-mongo/docs/2.0.0.M2/reference/html/#repositories)
	
	A word about the testing class {@code ClientRepository}
	Because we are using embedded MongoDB we have nothing to configure for the test, all we need is a bunch of annotations and ClientRepository that's injected with @Autowired
	
4. Let's expose the domain entities as Rest API
-----------------------------------------------

4.1 Add 

